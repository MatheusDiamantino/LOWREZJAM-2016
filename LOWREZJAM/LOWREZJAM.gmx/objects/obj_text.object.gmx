<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creation Code (variables set up)

// Messages
// CREATE MESSAGE ON CREATION CODE WHEN OBJ PLACED IN ROOM
// SET tX and tY THERE TOO


message_current     = 0;            // Current message displaying
timer               = 0;            // Counts delay
cutoff              = 0;            // Cutoff the message at position
portrait            = "none";      // Type of portrait displayed
modifier            = 0;            // Type of modifier

t                   = 0;
increment           = 1;

done                = false;        // Finished the dialogue

message[0] = "Hello!"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(pixel);
draw_set_colour(c_white);

// Number of messages
message_end = array_length_1d(message);

if(message_end &gt; 0)
{
    
    var charWidth           = 30;       // Distance between characters
    var lineEnd             = 35;       // Line size
    var line                = 0;        // Current line
    var space               = 0;        // 
    var i                   = 1;        // Looping variable
    var delay               = 2;        // Delay between character drawn

    // Updates cutoff each delay time
    if(cutoff &lt; string_length(message[message_current]))
    {
        if(timer &gt;= delay)
        {
            cutoff++;
            timer = 0;
        } else timer++;
    }
    
    // Next message
    if(keyboard_check_pressed(vk_space))
    {
        // Go to next message
        if(message_current &lt; message_end - 1)
        {
            message_current++;
            cutoff = 0;
        } else done = true;
    }
    
    // Draw Text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff)
    {
        
        //Check for modifier
        if(string_char_at(message[message_current], i) == "\")
        {
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
        }
        
        // Checks the length of the word it is drawing
        var length = 0;
        while(string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current]))
        {
            i++;
            length++;
        }
        
        // Checks if line should end
        if(space + length &gt; lineEnd)
        {
            space = 0;
            line++;
        }
        // Set back position to current
        i-= length;
        
        // Draw text with given modifier
        switch(modifier)
        {
            case 0: // Normal
            {
                draw_set_colour(c_white);
                draw_text(0, 0, string_char_at(message[message_current], i));
                break;
            }
            
            case 1: // Shaky
            {
                draw_set_colour(c_white);
                draw_text(tX + (space * charWidth) + random_range(-1, 1), tY + (13 * line) + random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            
            default: // Normal text (in case you won't have any modifiers in message
            {
                draw_set_colour(c_white);
                draw_text(0, 0, string_char_at(message[message_current], i));
                break;
            }
        }
        
        space++;
        i++;
    }
    
    // Draw Portrait
    switch(portrait)
    {
        case "none":
            break;
        case "diest":
            draw_sprite(spr_portrait, 0, 5, view_hview[0] - 55);
            break;
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
